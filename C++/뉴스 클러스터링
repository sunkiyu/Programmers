#include <string>
#include <vector>
#include <algorithm>

using namespace std;

int solution(string str1, string str2) {
       vector<string> strv1,strv2;
    for(int i=0; i<str1.length(); i++) str1[i] = toupper(str1[i]);
    for(int i=0; i<str2.length(); i++) str2[i] = toupper(str2[i]);

    int makeLength =0;
    string m_str1="";

    auto makefunc = [&m_str1,&makeLength](string &param,vector<string> &v)mutable{
    for(int i=0; i<param.length(); i++)
    {
        if('A'<=param[i] && param[i]<='Z')
        {
            m_str1+=param[i];
            makeLength++;
            if(makeLength==2)
            {
                v.push_back(m_str1);
                makeLength =1;
                m_str1 = m_str1[1];
            }
        }
        else
        {
            if(makeLength==1)
            {
                m_str1="";
                makeLength =0;
            }
            continue;
        }

    }
                                                               };
    makefunc(str1,strv1);
    makeLength = 0;
    m_str1 = "";
    makefunc(str2,strv2);
    int common;

    auto makeZip = [&common](vector<string> &v1, vector<string> &v2){
        for(int i=0; i<v2.size(); i++)
        {
            string param = v2[i];
            auto it = find_if(v1.begin(),v1.end(),[&param](string str){if(str==param)return true; return false;});
            if(it != v1.end())
            {
                common++;
                v1.erase(it);
                auto it2 = v2.begin();
                while(i)
                {
                    it2++;
                    i--;
                }
                v2.erase(it2);
                i-=1;
            }
        }};

    if(strv1.size()>=strv2.size())
    {
        makeZip(strv1,strv2);
    }
    else
        makeZip(strv2,strv1);

     int sumcom = common+strv1.size() +strv2.size();

     if(common==0 && sumcom==0) return 65536;
    
     double answer = (double)common / sumcom;
     return answer * 65536;
}
