#include <string>
#include <vector>
#include <algorithm>
#include <queue>
#include <cstring>

using namespace std;

vector<int> vtCon[20001];
int vtCheck[20001] = {0,};
int vtDist[20001] = {0,};


int solution(int n, vector<vector<int>> vertex) {
    int vDiff =-1;
    
    for(int i=0; i<vertex.size(); i++)
    {
        vtCon[vertex[i][0]].push_back(vertex[i][1]);
        vtCon[vertex[i][1]].push_back(vertex[i][0]);
    }
    
    queue<pair<int,int>> vQ;
    vQ.push({1,0});
    vtCheck[1] = 1;
   
    while (!vQ.empty())
    {
        int node = vQ.front().first;
        int dist = vQ.front().second;
        vQ.pop();
        
        if(node!=1)
        {
            vtDist[node] = dist;
            if(vDiff<dist)
                vDiff=dist;
        }
        
        for(int i=0; i<vtCon[node].size(); i++)
        {
            if(!vtCheck[vtCon[node][i]])
            {
                vtCheck[vtCon[node][i]]=1;
                vQ.push({vtCon[node][i],dist+1});
            }
        }
    }
    int vtAns=0;
    for(int i=2; i<=n; i++)
    {
        if(vtDist[i]==vDiff) vtAns++;
    }
    
    return vtAns;
}
